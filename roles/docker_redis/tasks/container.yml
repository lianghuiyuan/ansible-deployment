---
# https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html


- name: Find the master Redis host_inner_address
  set_fact:
    redis_primary_ip: >-
      {{ (groups['docker_redis'] | map('extract', hostvars) | selectattr('redis_role', 'equalto', 'master') | map(attribute='host_inner_address') | list | first | default('none')) }}
  delegate_to: localhost
  run_once: true
  tags: ['always']

- name: Output the master Redis host_inner_address on all hosts
  debug:
    msg: "Master Redis host_inner_address: {{ redis_primary_ip }}"
  tags: ['debug']

- name: container | Ensure directorys has correct ownership
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: '1000'
    group: '1000'
    mode: '0777'
    recurse: yes
  with_items: 
    - '{{ redis_data_dir }}'
  tags: ['install', 'start', 'recreate', 'update']

- name: container | {{ docker_container_state }} Redis container
  community.docker.docker_container:
    name: 'redis_{{ redis_node_id }}_{{ redis_role }}'
    image: '{{ redis_image }}:{{ redis_version }}'
    hostname: 'redis_{{ redis_node_id }}_{{ redis_role }}'
    state: '{{ docker_container_state }}'        # choices: [absent, present, healthy, stopped, started]
    restart: '{{ docker_container_restart }}'    # Use with started state to force a matching container to be stopped and restarted.
    recreate: '{{ docker_container_recreate }}'  # Use with present and started states to force the re-creation of an existing container.
    restart_policy: always
    ports:
      - "{{ redis_port }}:6379"
    volumes:
      - '{{ redis_data_dir }}:/bitnami/redis/data'
    env:
      REDIS_REPLICATION_MODE: '{{ redis_role }}'
      REDIS_PASSWORD: '{{ redis_password }}'
      REDIS_DISABLE_COMMANDS: 'FLUSHDB,FLUSHALL'
  when: redis_role == 'master'
  tags: ['install', 'start', 'stop', 'restart', 'uninstall','destory', 'recreate', 'update']

- name: container | {{ docker_container_state }} Redis container
  community.docker.docker_container:
    name: 'redis_{{ redis_node_id }}_{{ redis_role }}'
    image: '{{ redis_image }}:{{ redis_version }}'
    hostname: 'redis_{{ redis_node_id }}_{{ redis_role }}'
    state: '{{ docker_container_state }}'        # choices: [absent, present, healthy, stopped, started]
    restart: '{{ docker_container_restart }}'    # Use with started state to force a matching container to be stopped and restarted.
    recreate: '{{ docker_container_recreate }}'  # Use with present and started states to force the re-creation of an existing container.
    restart_policy: always
    ports:
      - "{{ redis_port }}:6379"
    volumes:
      - '{{ redis_data_dir }}:/bitnami/redis/data'
    env:
      REDIS_REPLICATION_MODE: '{{ redis_role }}'
      REDIS_PASSWORD: '{{ redis_password }}'
      REDIS_DISABLE_COMMANDS: 'FLUSHDB,FLUSHALL'
      REDIS_MASTER_HOST: '{{ redis_primary_ip }}'
      REDIS_MASTER_PORT_NUMBER: '{{ redis_port }}'
      REDIS_MASTER_PASSWORD: '{{ redis_password }}'
  when: redis_role == 'replica'
  tags: ['install', 'start', 'stop', 'restart', 'uninstall','destory', 'recreate', 'update']

- name: remove directorys
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: 
    - '{{ redis_data_dir }}'
  tags: ['destory']