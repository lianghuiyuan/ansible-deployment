---
# 


- name: container | Ensure directorys has correct ownership
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: '1000'
    group: '1000'
    mode: '0777'
    recurse: yes
  with_items: 
    - '{{ stan_data_dir }}'
    - '{{ stan_config_dir }}'
  tags: ['install', 'start', 'recreate', 'update']

- name: image | Copy file with owner and permissions
  ansible.builtin.copy:
    src: '{{ files_local_dir }}/{{ item }}'
    dest: '{{ stan_config_dir }}/{{ item }}'
    owner: root
    group: root
    mode: '0644'
  with_items: 
    - 'nats.conf'
  tags: ['install', 'start', 'recreate', 'update']

- name: container | {{ docker_container_state }} NATS container
  community.docker.docker_container:
    name: 'nats-streaming'
    image: '{{ nats_image }}:{{ nats_version }}'
    hostname: 'nats-streaming'
    state: '{{ docker_container_state }}'        # choices: [absent, present, healthy, stopped, started]
    restart: '{{ docker_container_restart }}'    # Use with started state to force a matching container to be stopped and restarted.
    recreate: '{{ docker_container_recreate }}'  # Use with present and started states to force the re-creation of an existing container.
    restart_policy: always
    ports:
      - "{{ stan_http_port }}:4222"      # NATS client port
      - "{{ stan_report_port }}:8222"    # Monitoring port
      - "{{ stan_cluster_port }}:6222"   # Cluster communication port
    volumes:
      - '{{ stan_data_dir }}:/data/streaming-store'
      - '{{ stan_config_dir }}/nats.conf:/data/nats.conf'
    command: ["-c", "/data/nats.conf"]
  tags: ['install', 'start', 'stop', 'restart', 'uninstall','destory', 'recreate', 'update']

- name: remove directorys
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: 
    - '{{ stan_data_dir }}'
    - '{{ stan_config_dir }}'
  tags: ['destory']