---
# pull save load distribute 

- name: 'image | Ensure directorys has correct ownership'
  ansible.builtin.file:
    path: '{{ item }}'
    state: 'directory'
    owner: '1000'
    group: '1000'
    mode: '0755'
    recurse: yes
  with_items: 
    - '{{ image_archive_dir }}'
  tags: ['pull_images', 'load_images']

# - name: 'image | Login into {{ docker_registry }} on local machine'
#   delegate_to: localhost
#   community.docker.docker_login:
#     registry: "{{ docker_registry }}"
#     username: "{{ registry_user }}"
#     password: "{{ registry_pwd }}"
#     reauthorize: true
#     validate_certs: false
#   tags: ['pull_images']

# - name: image | Pull an image on local machine
#   delegate_to: localhost
#   community.docker.docker_image:
#     name: '{{ image }}:{{ version }}'
#     source: pull
#   tags: ['pull_images']

# - name: image | Log out of {{ docker_registry }} on local machine
#   delegate_to: localhost
#   community.docker.docker_login:
#     state: absent
#   tags: ['pull_images']

# - name: image | Archive image on local machine
#   delegate_to: localhost
#   community.docker.docker_image:
#     name: '{{ image }}'
#     tag: '{{ version }}'
#     state: 'present'
#     archive_path: '{{ image_local_dir }}/{{ es_image_archive_name }}'
#     source: local
#   tags: ['load_images']

- name: image | Copy file with owner and permissions
  ansible.builtin.copy:
    src: '{{ image_local_dir }}/{{ es_image_archive_name }}'
    dest: '{{ image_archive_dir }}/{{ es_image_archive_name }}'
    owner: root
    group: root
    mode: '0644'
  tags: ['load_images']

# - name: Synchronize directory to remote server
#   ansible.builtin.synchronize:
#     src: '{{ image_local_dir }}/{{ es_image_archive_name }}'
#     dest: '{{ image_archive_dir }}/{{ es_image_archive_name }}'
#     recursive: yes
#     delete: yes 
#   tags: ['load_images']

- name: image | Ensure Docker SDK for Python is installed
  ansible.builtin.pip:
    name: docker
  tags: ['load_images']

- name: image | Load image from archive
  community.docker.docker_image:
    name: '{{ image }}'
    tag: '{{ version }}'
    # state: 'present'
    load_path: '{{ image_archive_dir }}/{{ es_image_archive_name }}'
    source: load
  tags: ['load_images']

- name: image | Remove image
  community.docker.docker_image:
    name: '{{ image }}'
    tag: '{{ version }}'
    state: 'absent'
  tags: ['destory']

- name: remove image tar file
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: 
    - '{{ image_archive_dir }}/{{ es_image_archive_name }}'
  tags: ['destory']